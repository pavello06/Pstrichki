Unit Unit1;

Interface

Uses
    CheckerListUnit;

Type
    TTurn = (Light, Dark);

Var
    LightCheckerList, DarkCheckerList: TCheckerList;
    Turn: TTurn = Light;

Implementation

Uses
    GameUnit, FrontEndGameUnit;

Var
    IsMoving: Boolean = False;
    ClickedChecker: PChecker = Nil;
    MouseDownPosition, MouseUpPosition: TPosition;

Procedure CreateCheckers(Const CheckerList: TCheckerList; Const InitialY: Integer);
Var
    Parameters: TParameters;
    I: Integer;
Begin
    CheckerList.Initialize();

    With Parameters Do
    Begin
        Position.X := BorderSize + CellSize Div 2;
        Position.Y := InitialY;
        Speed.X := 0;
        Speed.Y := 0;
    End;

    For I := 1 To INITIAL_CHECKERS_AMOUNT Do
    Begin
        CheckerList.AddChecker(Parameters);
        Parameters.Position.X := Parameters.Position.X + CellSize;
    End;
End;

Procedure CreateLightDarkCheckers();
Var
    InitialY: Integer;
Begin
    InitialY := BoardSize - (BorderSize + CellSize Div 2);
    CreateCheckers(LightCheckerList, InitialY);
    InitialY := BorderSize + CellSize Div 2;
    CreateCheckers(DarkCheckerList, InitialY);
End;


Procedure FindClickedChecker(Const ClickPosition: TPosition);
Var
    CurrChecker: PChecker;
Begin
    If Turn = Light Then
        CurrChecker := LightCheckerList.Head
    Else
        CurrChecker := DarkCheckerList.Head;

    While (ClickedChecker = Nil) And (CurrChecker <> Nil) Do
    Begin
        With CurrChecker.Parameters Do
            If (Abs(ClickPosition.X - Position.X) < CheckerRadius) And
               (Abs(ClickPosition.Y - Position.Y) < CheckerRadius) Then
                ClickedChecker := CurrChecker;
        CurrChecker := CurrChecker^.Next;
    End;
End;


Procedure CheckerMouseDown(Const ClickPosition: TPosition);
Begin
    MouseDownPosition := ClickPosition;
End;

Procedure MouseDown(Const ClickPosition: TPosition);
Begin

End;








End.
